pragma solidity ^0.5.0;

contract MediChain{

    struct Data {
      string cloudAddress;
      uint expireTime;
      string patientUserName;
    }


    address ownerAddress;
    mapping (string=>Data) public dataMapping;


    constructor()public {
        ownerAddress = msg.sender;
    }

    modifier validityOfOwner{
        require(msg.sender==ownerAddress);
        _;
    }

    function setData(string memory addr,string memory _cloudAddress, uint256 _time, string memory _patientUserName)public{
        Data memory data;
        data.cloudAddress = _cloudAddress;
        data.expireTime = _time;
        data.patientUserName = _patientUserName;
        dataMapping[addr] = data;
    }
    function getCloudAddress(string memory addr, uint _time) public view  returns (string memory) {
        Data memory data = dataMapping[addr];
        if(data.expireTime<_time){
            return "Time expired";
        }
        return data.cloudAddress;
    }
    function getPatientUserName(string memory addr, uint _time) public view  returns (string memory) {
        Data memory data = dataMapping[addr];
        if(data.expireTime<_time){
            return "Time expired";
        }
        return data.patientUserName;
    }

}

///smart contact